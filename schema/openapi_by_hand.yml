openapi: "3.0.2"
info:
  title: LaterLetters Api
  version: "1.0"
servers:
  - url: http://localhost:3000/

tags:
  - name: Auth
    description: Logging in and stuff
  - name: Letters

components:
  headers:
    LoginCookie:
      schema:
        type: string
        format: uuid
      description: Session Cookie

  responses:
    SessionCookie:
      description: A succesful login response
      headers:
        Set-Cookie:
          $ref: "#/components/headers/LoginCookie"

  schemas:
    ArrayOfLetters:
      type: array
      items:
        type: object
        properties:
          body:
            type: string
          tag_ids:
            type: array
            items:
              type: string
          tag_list:
            type: object
            additionalProperties:
              type: object
              properties:
                name:
                  type: string
                color:
                  type: string

  requestBodies:
    UserCredentials:
      description: Credentials for loging in and creating Account
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                example: johndoe@gmail.com
              password:
                type: string
                example: password123

  securitySchemes:
    sessionKeyCookie:
      type: apiKey
      in: cookie
      name: sesshawn

    emailHeader:
      type: apiKey
      in: header
      name: "X-User-Email"

paths:
  /api/letters:
    get:
      tags:
        - Letters
      operationId: queryLetters
      security:
        - sessionKeyCookie: []
        - emailHeader: []
      responses:
        "200":
          description: "Array of Letters"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfLetters"
        "500":
          description: "Something went wrong"
        "401":
          description: "wrong creds"
    post:
      tags:
        - Letters
      operationId: createLetter
      security:
        - sessionKeyCookie: []
        - emailHeader: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                tag_list:
                  type: object
                  additionalProperties:
                    type: object
                    properties:
                      name:
                        type: string
                      color:
                        type: string
      responses:
        "200":
          description: "Letter Saved Succesfully"
        "500":
          description: "Something went wrong"
        "401":
          description: "wrong creds"

  /api/letters/{tag_id}:
    get:
      tags:
        - Letters
      operationId: getLettersByTag
      security:
        - SessionKeyCookie: []
        - emailHeader: []
      parameters:
        - name: tag_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Array of Letters that contain the Tag"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfLetters"
        "500":
          description: "Something went wrong server side"
        "401":
          description: "wrong creds"
    delete:
      tags:
        - Letters
      operationId: deleteTaggedLetters
      security:
        - SessionKeyCookie: []
        - emailHeader: []
      parameters:
        - name: tag_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Deleted Succesfully"
        "500":
          description: "Something went wrong server side"
        "401":
          description: "wrong creds"

  /api/letter/{letter_id}:
    delete:
      tags:
        - Letters
      operationId: deleteLetterById
      security:
        - SessionKeyCookie: []
        - emailHeader: []
      parameters:
        - name: letter_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Letter Deleted Succ"
        "500":
          description: "Something went wrong server side"
        "401":
          description: "wrong creds"
  /api/tags:
    get:
      tags:
        - Letters
      operationId: getTags
      security:
        - SessionKeyCookie: []
        - emailHeader: []
      responses:
        "200":
          description: "An Object that maps tag_id to another object containing tagColor and tagName"
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    name:
                      type: string
                    color:
                      type: string
        "500":
          description: "Something went wrong server side"
        "401":
          description: "wrong creds"
  /api/tags/{tag_id}:
    delete:
      tags:
        - Letters
      operationId: deleteTag
      summary: Deletes a tag, but no letters
      security:
        - SessionKeyCookie: []
        - emailHeader: []
      parameters:
        - name: tag_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Tag Succesfully Deleted"
        "500":
          description: "Something went wrong server side"
        "401":
          description: "wrong creds"

  /user/login:
    post:
      tags:
        - Auth
      operationId: loginUser
      summary: Allows user to login
      requestBody:
        $ref: "#/components/requestBodies/UserCredentials"

      responses:
        "200":
          description: "Login Succes or Fail"
          $ref: "#/components/responses/SessionCookie"
        "413":
          description: "Payload too Large"
        "500":
          description: "Server side error"

  /user/register:
    post:
      operationId: registerUser
      tags:
        - Auth
      summary: Creates a new User Account
      requestBody:
        $ref: "#/components/requestBodies/UserCredentials"
      responses:
        "200":
          description: "User Created"
          $ref: "#/components/responses/SessionCookie"
        "413":
          description: Payload too large
        "500":
          description: Server side error

  /user/logout:
    put:
      operationId: userLogout
      summary: Deletes session ID
      tags:
        - Auth
      parameters:
        - in: cookie
          required: true
          name: Session
          schema:
            type: string
      responses:
        "200":
          description: Succesfully Logged out
          headers:
            Set-Cookie:
              schema:
                type: string
                enum:
                  - ""
                default: ""
                description: deletes the cookie by setting it to blank
        "418":
          description: Unconfirmed Logout
        "500":
          description: Server side error

  /user/forgot-password:
    post:
      operationId: requestPasswordReset
      tags:
        - Auth
      summary: Sends a reset password link to email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: Reset link will be sent if email exists.
        "500":
          description: Server error
        "503":
          description: Problem with AWS SES

  /user/reset-password:
    post:
      operationId: resetPassword
      tags:
        - Auth
      summary: If JWT.valid(), reset password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                uuid:
                  type: string
      responses:
        "200":
          description: Password Succesfully Reset
        "401":
          description: Invalid JWT, u sneaky boi
        "500":
          description: Server Error
        "418":
          description: Not supposed to happen
  /user/anon-account:
    get:
      operationId: createAnonAccount
      tags:
        - Auth
      responses:
        "200":
          description: "Anonymous account + Cookies Sent"
        "500":
          description: "Error Creating Temp Account"